resources:
  repositories:
    - repository: BASE_REPOSITORY
      type: github
      name: wso2-enterprise/choreo-control-plane
      ref: refs/heads/main-ci
      endpoint: wso2-enterprise
    - repository: PDP_BASE_REPOSITORY
      type: github
      name: wso2-enterprise/choreo-privatedp-central-manifests
      ref: refs/heads/main
      endpoint: wso2-enterprise
    - repository: TEMPLATE_REPOSITORY
      type: github
      name: wso2-enterprise/choreo-common-pipeline-templates
      ref: refs/heads/main
      endpoint: wso2-enterprise
  containers:
    - container: Liquibase
      image: choreoipaas/liquibase:4.11.0-dfbe56c9dc39071e72ca73c2f60c79e9b9f38ca0
      endpoint: 'wso2choreo-control-plane-acr'

trigger:
  batch: true
  branches:
    include:
      - dev-ci
  paths:
    include:
      - azure-resources/dev
      - kustomize/dev-control-plane
      - kustomize/dev-dataplane
      - kustomize/dev-dataplane-common
      - kustomize/dev-dataplane-e2
      - kustomize/dev-routing
      - kustomize/dev-workspace
      - kustomize/basev2.version
      - .azure/dev-deploy-v2.yml

pr: none

pool: choreo-dev-scale-set-agents

variables:
  - group: choreo-ai-multivariate-anomaly-detector
  - group: dev-deployment
  - name: clusterState
    value: $[variables.cluster_state]
  - group: dev-database
  - name: ENVIRONMENT
    value: dev
  - name: NON_AKS_AZURE_SUBSCRIPTION  # This is a service principal used by the azureSubscription field in AzureCLI@2 tasks
    value: choreo-dev-non-aks-rg
  - name: OVERLAY_WORKING_DIRECTORY
    value: choreo-cp-env-overlay/kustomize

stages:
  - stage: UpdatingDatabase
    displayName: Updating database
    jobs: 
    - job: CheckChanges
      displayName: 'Check changes'
      steps:
      - checkout: BASE_REPOSITORY
      - checkout: self
        persistCredentials: true    
      - script: |
          push_git_changers () {
            git config --global user.email "choreo-cicd@wso2.com"
            git config --global user.name "Choreo CI Agent"
            git diff
            git commit -am "Update image tags in $(Build.BuildNumber)"
            git remote -v
            git branch -al
            if git push origin HEAD:$(Build.SourceBranchName) ; then
              echo "Changes pushed successfully"
            else
              git fetch origin
              git merge --no-edit --strategy recursive --strategy-option theirs origin/$(Build.SourceBranchName)
              git push origin HEAD:$(Build.SourceBranchName)
            fi
          }

          if [ -s version/successful-commithash.txt ]; then
            current_commithash=$(cat kustomize/basev2.version)
            previous_commithash=$(cat successful-commithash.txt)
            path_filter"liquibase/db/changelog"
            lenth=${#path_filter}
            CHANGED_FILES=$(git diff $previous_commithash...$(Build.SourceVersion) --name-only | xargs -L1 dirname | uniq)
            MATCH_COUNT=0
            CHANGED_FOLDERS=""
            for FILE in $CHANGED_FILES
            do
              if [[ $FILE == *$path_filter* ]]; then
                CHANGED_FOLDERS="$(echo ${FILE:$(($lenth+1))}) $CHANGED_FOLDERS"

                echo "MATCH:  ${FILE} changed"
                MATCH_COUNT=$(($MATCH_COUNT+1))
              else
                echo "IGNORE: ${FILE} changed"
              fi
            done
            for i in $CHANGED_FOLDERS
            do
              p=`echo -e $p'\n'$i`
            done
            echo $p
            echo "$MATCH_COUNT match(es) for filter '$path_filter' found."
            if [[ $MATCH_COUNT -gt 0 ]]; then
              echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
              echo "$p" > version/changefolder.txt
            else
              echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]false"
            fi
          else
            echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
          fi
          echo "######################################"
          echo "##########Changed Database############"
          echo "######################################"
          echo "$p"
          readarray -t change_folder <version/changefolder.txt
          echo "##vso[task.setvariable variable=db;]$change_folder"
          echo "######################################"
          echo "###########Update gitHub##############"
          echo "######################################"
          push_git_changers
          echo "######################################"
        name: check_changes
        displayName: 'Check changed files'


    - job: ApplyChanges
      container: Liquibase
      displayName: Applying database changes in choreo_testbase_db
      steps:  
      - checkout: self
      - checkout: BASE_REPOSITORY
      - template: update-database-template.yaml@TEMPLATE_REPOSITORY
        parameters:
          DB_URL: 'jdbc:sqlserver://$(DB_URL):1433;database=choreo_testbase_db;'
          DB_USERNAME: $(DB_USERNAME)
          DB_PASSWORD: $(DB_PASSWORD)
          CHANGELOGFILE: liquibase/db/master-choreo_testbase_db.mysql.yml
          LIQUIBASE_DRIVER: ${LIQUIBASE_DRIVER}
          LIQUIBASE_CLASSPATH: ${LIQUIBASE_CLASSPATH}
