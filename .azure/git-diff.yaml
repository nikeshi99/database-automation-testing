resources:
  repositories:
    - repository: BASE_REPOSITORY
      type: github
      name: nikeshi99/git-log
      ref: refs/heads/main
      endpoint: nikeshi99
trigger: 
  branches:
    include:
    - main
  paths:
    include:
    - .azure/git-diff.yaml
pr: none
stages:
- stage: UpdatingDatabase
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: CheckChanges
    displayName: 'Check changes'
    steps:
    - checkout: self
    - checkout: BASE_REPOSITORY
    - bash: |
        if [ -s version/commithash.txt ]; then
          previous=$(cat version/commithash.txt)
          PATH_FILTER="Liquibase/db/changelog"
          CHANGED_FILES$(git diff previous...$(Build.SourceVersion) --name-only)
          MATCH_COUNT=0
          for FILE in $CHANGED_FILES
          do
            if [[ $FILE == *$PATH_FILTER* ]]; then
              echo "MATCH:  ${FILE} changed"
              MATCH_COUNT=$(($MATCH_COUNT+1))
            else
              echo "IGNORE: ${FILE} changed"
            fi
          done
          echo "$MATCH_COUNT match(es) for filter '$PATH_FILTER' found."
          if [[ $MATCH_COUNT -gt 0 ]]; then
            echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
            echo "$(Build.SourceVersion)" > version/commithash.txt
          else
            echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]false"
          fi
        else
          echo "$(Build.SourceVersion)" > version/commithash.txt
      name: check_changes
  

      #   PATH_FILTER="Liquibase/db/changelog"
      #   CHANGED_FILES=$(git diff HEAD HEAD~ --name-only)
      #   MATCH_COUNT=0
      #   echo "Checking for file changes..."
      #   for FILE in $CHANGED_FILES
      #   do
      #     if [[ $FILE == *$PATH_FILTER* ]]; then
      #       echo "MATCH:  ${FILE} changed"
      #       MATCH_COUNT=$(($MATCH_COUNT+1))
      #     else
      #       echo "IGNORE: ${FILE} changed"
      #     fi
      #   done
      #   echo "$MATCH_COUNT match(es) for filter '$PATH_FILTER' found."
      #   if [[ $MATCH_COUNT -gt 0 ]]; then
      #     echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
      #   else
      #     echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]false"
      #   fi
      # name: check_changes
      displayName: 'Check changed files'
  - job: VerifyLiquibase 
    dependsOn: CheckChanges
    condition: eq(dependencies.CheckChanges.outputs['check_changes.SOURCE_CODE_CHANGED'], 'true')
    steps:
    - checkout: self
    - script: |
        echo "File change detected"