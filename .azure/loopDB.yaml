resources:
  repositories:
    - repository: BASE_REPOSITORY
      type: github
      name: nikeshi99/git-log
      ref: refs/heads/main
      endpoint: nikeshi99
trigger: none
  # branches:
  #   include:
  #   - main
  # paths:
  #   include:
  #   - .azure/loopDB.yaml

pr: none

parameters:
- name: databases
  type: object
  default:
  - db1
  - db2
  - db3

stages:
- stage: UpdatingDatabase
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - ${{each db in parameters.databases}}:
    - job: CheckChanges${{db}}
      displayName: 'Check changes in ${{db}}'
      steps:
      - checkout: self
        persistCredentials: true
      - script: |
          if [ -s version/success_commithash.txt ]; then
            previous=$(cat version/success_commithash.txt)
            CHANGED_FILES=$(git diff $previous...$(Build.SourceVersion) --name-only -- logs/${{ db }}/)
            PATH_FILTER="logs/${{ db }}"
            echo $CHANGED_FILES
            MATCH_COUNT=0
            for FILE in $CHANGED_FILES
            do
              if [[ $FILE == *$PATH_FILTER* ]]; then
                echo "MATCH:  ${FILE} changed"
                MATCH_COUNT=$(($MATCH_COUNT+1))
              else
                echo "IGNORE: ${FILE} changed"
              fi
            done
            echo "$MATCH_COUNT match(es) for filter '$PATH_FILTER' found."
            if [[ $MATCH_COUNT -gt 0 ]]; then
              echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
            else
              echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]false"
            fi
          else
            echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]false"
            echo "Empty commithash"
          fi
        name: check_changes
        displayName: 'Check changed files'
    - job: VerifyLiquibase${{db}} 
      dependsOn: CheckChanges${{db}}
      condition: eq(dependencies.CheckChanges${{db}}.outputs['check_changes.SOURCE_CODE_CHANGED'], 'true')
      steps:
      - checkout: self
      - script: |
          echo "File change detected in ${{ db }}"
          echo "##vso[task.setvariable variable=UPDATE_CHANGED;isOutput=true]true"
        name: update_changes
        displayName: 'Update changed files'
    - job: UpdateCommithash${{db}}
      dependsOn: VerifyLiquibase${{db}}
      condition: eq(dependencies.VerifyLiquibase${{db}}.outputs['update_changes.UPDATE_CHANGED'], 'true') 
      steps:
      - checkout: self
      - script: |
          push_git_changers () {
            git config --global user.email "nikeshikumarasinghe@gmail.com"
            git config --global user.name "Nikeshi Kumarasinghe"
            git diff
            git commit -am "Update succeeded commithash in $(Build.SourceVersion)"
            git remote -v
            git branch -al
            if git push origin HEAD:main ; then
              echo "Changes pushed successfully"
            else
              git fetch origin
              git merge --no-edit --strategy recursive --strategy-option theirs origin/main
              git push origin HEAD:main
            fi
          }
          echo "#############previous##################"
          echo  $(cat version/success_commithash.txt)
          echo "######################################"
          echo "##############   new   ###############"
          echo $(Build.SourceVersion)
          echo "######################################"
          echo "$(Build.SourceVersion)" > version/success_commithash.txt
          echo "######################################"
          echo "###########Update gitHub##############"
          echo "######################################"
          push_git_changers
          echo "######################################"
