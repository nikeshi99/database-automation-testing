parameters:
- name: DB
  type: string
# - name: DB_USERNAME
#   type: string
# - name: DB_PASSWORD
#   type: string
# - name: CHANGELOGFILE
#   type: string
# - name: LIQUIBASE_DRIVER
#   type: string
# - name: LIQUIBASE_CLASSPATH
#   type: string
# - name: WOKRING_DIR
#   type: string
#   default: database-automation-testing

steps: 
- bash: |
    push_git_changers () {
      git config --global user.email "nikeshikumarasinghe@gmail.com"
      git config --global user.name "Nikeshi Kumarasinghe"
      git diff
      git commit -am "Update succeeded commithash in $(Build.SourceVersion)"
      git remote -v
      git branch -al
      if git push origin HEAD:main ; then
        echo "Changes pushed successfully"
      else
        git fetch origin
        git merge --no-edit --strategy recursive --strategy-option theirs origin/main
        git push origin HEAD:main
      fi
    }
    if [ -s version/commithash.txt ]; then
      previous=$(cat version/commithash.txt)
      PATH_FILTER="logs/${{ parameters.DB }}"
      lenth=${#PATH_FILTER}
      CHANGED_FILES=$(git diff $previous...$(Build.SourceVersion) --name-only | xargs -L1 dirname | uniq)
      MATCH_COUNT=0
      CHANGED_FOLDERS=""
      for FILE in $CHANGED_FILES
      do
        if [[ $FILE == *$PATH_FILTER* ]]; then
          CHANGED_FOLDERS=",\"$(echo ${FILE:$(($lenth+1))})\"$CHANGED_FOLDERS"
          echo "MATCH:  ${FILE} changed"
          MATCH_COUNT=$(($MATCH_COUNT+1))
        else
          echo "IGNORE: ${FILE} changed"
        fi
      done

      echo "$MATCH_COUNT match(es) for filter '$PATH_FILTER' found."
      if [[ $MATCH_COUNT -gt 0 ]]; then
        echo "${{ parameters.DB }} is changed"
      else
        echo "${{ parameters.DB }} is not changed"
      fi
    else
      echo "Empty commithash"
      echo "##vso[task.logissue type=error;]Missing commithash"
      echo "##vso[task.complete result=Failed;]"
    fi
    echo "######################################"
    echo "###########Update gitHub##############"
    echo "######################################"
    push_git_changers
    echo "######################################"
  name: check_changes
  displayName: 'Check changed files'

- script: |
    liquibase --url=${{ parameters.DB_URL }} --username=${{ parameters.DB_USERNAME }} --password=${{ parameters.DB_PASSWORD }} --changeLogFile=${{ parameters.CHANGELOGFILE }} --driver=${{ parameters.LIQUIBASE_DRIVER }} --classpath=${{ parameters.LIQUIBASE_CLASSPATH }} --logLevel=info validate
  workingDirectory: ${{ parameters.WOKRING_DIR }}
  displayName:  Validate database changes

- script: |
    liquibase --url=${{ parameters.DB_URL }} --username=${{ parameters.DB_USERNAME }} --password=${{ parameters.DB_PASSWORD }} --changeLogFile=${{ parameters.CHANGELOGFILE }} --driver=${{ parameters.LIQUIBASE_DRIVER }} --classpath=${{ parameters.LIQUIBASE_CLASSPATH }} --logLevel=info tag version_$(Build.SourceVersion)
    liquibase --url=${{ parameters.DB_URL }} --username=${{ parameters.DB_USERNAME }} --password=${{ parameters.DB_PASSWORD }} --changeLogFile=${{ parameters.CHANGELOGFILE }} --driver=${{ parameters.LIQUIBASE_DRIVER }} --classpath=${{ parameters.LIQUIBASE_CLASSPATH }} --logLevel=info status --verbose
    liquibase --url=${{ parameters.DB_URL }} --username=${{ parameters.DB_USERNAME }} --password=${{ parameters.DB_PASSWORD }} --changeLogFile=${{ parameters.CHANGELOGFILE }} --driver=${{ parameters.LIQUIBASE_DRIVER }} --classpath=${{ parameters.LIQUIBASE_CLASSPATH }} --logLevel=info updateSQl
  workingDirectory: ${{ parameters.WOKRING_DIR }}
  displayName: Verify database changes
