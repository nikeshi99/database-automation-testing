parameters:
- name: DB
  type: string

steps: 
- bash: |
    push_git_changers () {
      git config --global user.email "nikeshikumarasinghe@gmail.com"
      git config --global user.name "Nikeshi Kumarasinghe"
      git diff
      git commit -am "Update succeeded commithash in $(Build.SourceVersion)"
      git remote -v
      git branch -al
      if git push origin HEAD:main ; then
        echo "Changes pushed successfully"
      else
        git fetch origin
        git merge --no-edit --strategy recursive --strategy-option theirs origin/main
        git push origin HEAD:main
      fi
    }

    update_database () {
      echo "***********You are in another repo***************"
      update=true
      ls $(Agent.BuildDirectory)
      ls $(Agent.BuildDirectory)/s
      ls $(Agent.BuildDirectory)/s/git-log
      ls $(Agent.BuildDirectory)/s/git-log/logs
      cat $(Agent.BuildDirectory)/s/git-log/logs/nik.txt
      echo "*************************************************"
      echo "                                                 "   
    }

    cd $(Agent.BuildDirectory)/s/database-automation-testing 
    
    echo $(cat version/${{ parameters.DB }}_commithash.txt)

    if [ -s version/${{ parameters.DB }}_commithash.txt ]; then
      previous=$(cat version/${{ parameters.DB }}_commithash.txt)
      PATH_FILTER="logs/${{ parameters.DB }}"
      CHANGED_FILES=$(git diff $previous...$(Build.SourceVersion) --name-only)
      MATCH_COUNT=0
      for FILE in $CHANGED_FILES
      do
        if [[ $FILE == *$PATH_FILTER* ]]; then
          echo "MATCH:  ${FILE} changed"
          MATCH_COUNT=$(($MATCH_COUNT+1))
        else
          echo "IGNORE: ${FILE} changed"
        fi
      done

      echo "$MATCH_COUNT match(es) for filter '$PATH_FILTER' found."
      if [[ $MATCH_COUNT -gt 0 ]]; then
        echo "${{ parameters.DB }} is changed"
        update_database 
      else
        update=false
        echo "${{ parameters.DB }} is not changed"
      fi
    else
      update=false
      echo "Empty commithash"
      echo "##vso[task.complete result=Failed;]"
    fi

    if [[ "$update" == "true" ]]; then
      echo "**************************************"
      echo "           Update gitHub              "
      echo "**************************************"
      echo "$(Build.SourceVersion)" > version/${{ parameters.DB }}_commithash.txt
      push_git_changers
    else
      echo "No change in ${{ parameters.DB }} "
    fi
    echo "######################################"
  name: check_changes_${{ parameters.DB }}
  displayName: 'Update ${{ parameters.DB }}'
